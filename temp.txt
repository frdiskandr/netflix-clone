  // const activeRooms = {};

    // // web socket
    // io.on("connection", (socket) => {
    //   const userId = socket.id;
    //   console.log(`a user connected: ${userId}`);

    //   // Event untuk membuat room baru
    //   socket.on("createRoom", (roomName, callback) => {
    //     if (activeRooms[roomName]) {
    //       // Jika room sudah ada
    //       callback({
    //         success: false,
    //         message: `Room "${roomName}" sudah ada.`,
    //       });
    //       return;
    //     }
    //     socket.join(roomName); // Klien otomatis bergabung ke room yang dibuatnya
    //     activeRooms[roomName] = {
    //       users: [userId],
    //       videoState: { currentTime: 0, isPlaying: false, videoSrc: "" },
    //     }; // Inisialisasi state room
    //     console.log(
    //       `Pengguna ${userId} membuat dan bergabung ke room: ${roomName}`
    //     );
    //     callback({
    //       success: true,
    //       message: `Room "${roomName}" berhasil dibuat.`,
    //       roomName: roomName,
    //     });
    //     // Broadcast ke semua (opsional, jika ingin menampilkan daftar room aktif)
    //     io.emit("roomListUpdate", Object.keys(activeRooms));
    //   });

    //   // Event untuk bergabung ke room yang sudah ada
    //   socket.on("joinRoom", (roomName, callback) => {
    //     if (!activeRooms[roomName]) {
    //       callback({
    //         success: false,
    //         message: `Room "${roomName}" tidak ditemukan.`,
    //       });
    //       return;
    //     }
    //     socket.join(roomName);
    //     activeRooms[roomName].users.push(userId);
    //     console.log(`Pengguna ${userId} bergabung ke room: ${roomName}`);

    //     // Kirim state video saat ini ke pengguna yang baru bergabung
    //     socket.emit("initialVideoState", activeRooms[roomName].videoState);

    //     callback({
    //       success: true,
    //       message: `Berhasil bergabung ke room "${roomName}".`,
    //       roomName: roomName,
    //     });
    //     // Bisa juga broadcast ke anggota room lain bahwa ada user baru (opsional)
    //     socket.to(roomName).emit("userJoined", userId);
    //   });

    //   // Event untuk menyinkronkan sumber video
    //   socket.on("setVideoSource", (data) => {
    //     // data = { room, src }
    //     if (activeRooms[data.room]) {
    //       activeRooms[data.room].videoState.videoSrc = data.src;
    //       activeRooms[data.room].videoState.currentTime = 0; // Reset waktu saat video baru
    //       activeRooms[data.room].videoState.isPlaying = false;
    //       // Broadcast ke semua di room bahwa sumber video berubah
    //       io.to(data.room).emit("videoSourceChanged", data.src);
    //     }
    //   });

    //   // Event sinkronisasi video (play, pause, seek)
    //   socket.on("syncPlay", (data) => {
    //     // data = { room, time }
    //     if (activeRooms[data.room]) {
    //       activeRooms[data.room].videoState.isPlaying = true;
    //       activeRooms[data.room].videoState.currentTime = data.time;
    //       socket.to(data.room).emit("playVideo", data.time);
    //     }
    //   });

    //   socket.on("syncPause", (data) => {
    //     // data = { room }
    //     if (activeRooms[data.room]) {
    //       activeRooms[data.room].videoState.isPlaying = false;
    //       // Waktu terakhir mungkin sudah disimpan dari event 'play' atau 'seek'
    //       socket
    //         .to(data.room)
    //         .emit("pauseVideo", activeRooms[data.room].videoState.currentTime);
    //     }
    //   });

    //   socket.on("syncSeek", (data) => {
    //     // data = { room, time }
    //     if (activeRooms[data.room]) {
    //       activeRooms[data.room].videoState.currentTime = data.time;
    //       socket.to(data.room).emit("seekVideo", data.time);
    //     }
    //   });

    //   socket.on("cursorMove", (data) => {
    //     socket.to(data.room).emit("updateCursor", {
    //       id: userId,
    //       x: data.x,
    //       y: data.y,
    //     });
    //   });

    //   socket.on("disconnecting", () => {
    //     // Iterasi melalui semua room tempat socket ini bergabung
    //     socket.rooms.forEach((room) => {
    //       if (room !== socket.id) {
    //         // Jangan proses room default socket itu sendiri
    //         if (activeRooms[room]) {
    //           // Hapus user dari daftar di room
    //           activeRooms[room].users = activeRooms[room].users.filter(
    //             (id) => id !== userId
    //           );
    //           console.log(`Pengguna ${userId} keluar dari room: ${room}`);
    //           // Jika room kosong, hapus room (opsional)
    //           if (activeRooms[room].users.length === 0) {
    //             delete activeRooms[room];
    //             console.log(`Room ${room} dihapus karena kosong.`);
    //             io.emit("roomListUpdate", Object.keys(activeRooms)); // Update daftar room
    //           } else {
    //             // Beri tahu anggota room lain bahwa user ini keluar
    //             io.to(room).emit("userLeft", userId);
    //           }
    //         }
    //         io.to(room).emit("removeCursor", userId); // Hapus kursor pengguna yang disconnect
    //       }
    //     });
    //   });

    //   socket.on("disconnect", () => {
    //     console.log(`user disconnected : ${userId}`);
    //   });
    // });














    //! watch 
    
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>frdiskndr Streaming</title>
    <link
      href="https://fonts.googleapis.com/css2?family=Netflix+Sans:wght@300;400;700&display=swap"
      rel="stylesheet"
    />
    <style>
      :root {
        --netflix-black: #141414;
        --netflix-red: #e50914;
        --text-color: #ffffff;
        --secondary-text: #808080;
      }
      * {
        margin: 0;
        padding: 0;
        box-sizing: border-box;
      }
      body {
        font-family: "Netflix Sans", "Helvetica Neue", Helvetica, Arial,
          sans-serif;
        background-color: var(--netflix-black);
        color: var(--text-color);
        min-height: 100vh;
        display: flex;
        flex-direction: column;
      }
      header {
        background: linear-gradient(
          to bottom,
          rgba(0, 0, 0, 0.7) 0%,
          rgba(0, 0, 0, 0) 100%
        );
        padding: 1rem 4%;
        position: fixed;
        width: 100%;
        z-index: 1000;
        display: flex;
        justify-content: space-between;
        align-items: center;
      }
      .logo {
        color: var(--netflix-red);
        font-size: 2rem;
        font-weight: bold;
        text-transform: uppercase;
        letter-spacing: 1px;
        text-decoration: none;
      }
      main {
        flex: 1;
        padding-top: 68px;
        background: linear-gradient(
          to top,
          var(--netflix-black) 0%,
          rgba(0, 0, 0, 0.4) 100%
        );
      }
      .hero-section {
        position: relative;
        width: 100%;
        height: 80vh;
        display: flex;
        align-items: center;
        justify-content: center;
        background-color: #000;
      }
      .video-container {
        width: 100%;
        max-width: 1600px;
        position: relative;
      }
      video {
        width: 100%;
        height: auto;
        box-shadow: 0 40px 58px -16px rgba(0, 0, 0, 0.8);
      }
      .video-info {
        position: absolute;
        bottom: 10%;
        left: 4%;
        max-width: 600px;
      }
      .video-title {
        font-size: 2.5rem;
        margin-bottom: 1rem;
        text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.5);
      }
      .video-description {
        font-size: 1.2rem;
        color: var(--text-color);
        margin-bottom: 1.5rem;
        text-shadow: 1px 1px 2px rgba(0, 0, 0, 0.5);
      }
      .controls {
        display: flex;
        gap: 1rem;
      }
      .btn {
        padding: 0.8rem 2rem;
        border-radius: 4px;
        font-size: 1.1rem;
        font-weight: bold;
        cursor: pointer;
        transition: all 0.2s;
      }
      .btn-play {
        background-color: var(--text-color);
        color: var(--netflix-black);
        border: none;
      }
      .btn-play:hover {
        background-color: rgba(255, 255, 255, 0.75);
      }
      footer {
        background-color: var(--netflix-black);
        color: var(--secondary-text);
        padding: 2rem 4%;
        text-align: center;
      }
      .footer-content {
        max-width: 980px;
        margin: 0 auto;
        font-size: 0.9rem;
      }
      @media (max-width: 768px) {
        .video-title {
          font-size: 1.8rem;
        }
        .video-description {
          font-size: 1rem;
        }
        .btn {
          padding: 0.6rem 1.5rem;
          font-size: 1rem;
        }
      }
    </style>
  </head>
  <body>
    <header>
      <a href="/" class="logo">frdiskndr</a>
    </header>

    <main>
      <div class="hero-section">
        <div class="video-container">
          <iframe
            src="<%= q %>"
            allowfullscreen=""
            aria-controls="true"
            loading="lazy"
            referrerpolicy="no-referrer-when-downgrade"
            id="videoPlayer"
            controls
            autoplay
          >
            Browser Anda tidak mendukung tag video.
          </iframe>
          <div class="video-info">
            <h1 class="video-title">Streaming Video</h1>
            <p class="video-description">
              Nikmati pengalaman menonton yang luar biasa dengan kualitas
              streaming terbaik.
            </p>
            <div class="controls">
              <button
                class="btn btn-play"
                onclick="document.getElementById('videoPlayer').play()"
              >
                ▶ Putar
              </button>
            </div>
          </div>
        </div>
      </div>
    </main>

    <footer>
      <div class="footer-content">
        <p>&copy; 2025 frdiskndr Streaming. All rights reserved.</p>
      </div>
    </footer>
  </body>
</html>




// nobar 
<!DOCTYPE html>
<html lang="id">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Nonton Bareng - frdiskndr</title>
    <link
      href="https://fonts.googleapis.com/css2?family=Netflix+Sans:wght@300;400;700&display=swap"
      rel="stylesheet"
    />
    <style>
      :root {
        --netflix-black: #141414;
        --netflix-red: #e50914;
        --text-color: #ffffff;
        --secondary-text: #808080;
        --chat-bg: rgba(20, 20, 20, 0.9);
      }

      * {
        margin: 0;
        padding: 0;
        box-sizing: border-box;
      }

      body {
        font-family: "Netflix Sans", sans-serif;
        background-color: var(--netflix-black);
        color: var(--text-color);
        display: flex;
        min-height: 100vh;
      }

      .main-container {
        flex: 1;
        display: flex;
        flex-direction: column;
      }

      header {
        background: linear-gradient(
          180deg,
          rgba(0, 0, 0, 0.7) 10%,
          transparent
        );
        padding: 1rem 4%;
        display: flex;
        justify-content: space-between;
        align-items: center;
        position: fixed;
        width: calc(100% - 300px);
        z-index: 1000;
        transition: background-color 0.3s;
      }

      header.scrolled {
        background: var(--netflix-black);
      }

      .logo {
        color: var(--netflix-red);
        font-size: 1.8rem;
        font-weight: bold;
        text-decoration: none;
        text-transform: uppercase;
      }

      .video-container {
        flex: 1;
        padding: 20px;
        padding-top: 80px;
      }

      .video-wrapper {
        position: relative;
        width: 100%;
        background: #000;
        border-radius: 8px;
        overflow: hidden;
        box-shadow: 0 20px 40px rgba(0, 0, 0, 0.4);
      }

      video {
        width: 100%;
        aspect-ratio: 16/9;
      }

      .video-info {
        padding: 20px;
        background: linear-gradient(transparent, rgba(0, 0, 0, 0.8));
        position: absolute;
        bottom: 0;
        left: 0;
        right: 0;
      }

      .video-title {
        font-size: 1.5rem;
        margin-bottom: 10px;
      }

      .controls {
        display: flex;
        gap: 10px;
        align-items: center;
        margin-top: 15px;
      }

      .control-btn {
        background: rgba(255, 255, 255, 0.1);
        border: none;
        color: var(--text-color);
        padding: 8px 15px;
        border-radius: 4px;
        cursor: pointer;
        transition: all 0.3s;
        display: flex;
        align-items: center;
        gap: 5px;
      }

      .control-btn:hover {
        background: rgba(255, 255, 255, 0.2);
      }

      .progress-bar {
        flex: 1;
        height: 4px;
        background: rgba(255, 255, 255, 0.2);
        border-radius: 2px;
        cursor: pointer;
        position: relative;
      }

      .progress {
        height: 100%;
        background: var(--netflix-red);
        border-radius: 2px;
        width: 0%;
      }

      .chat-container {
        width: 300px;
        background: var(--chat-bg);
        border-left: 1px solid rgba(255, 255, 255, 0.1);
        display: flex;
        flex-direction: column;
      }

      .chat-header {
        padding: 15px;
        border-bottom: 1px solid rgba(255, 255, 255, 0.1);
        display: flex;
        justify-content: space-between;
        align-items: center;
      }

      .room-info {
        padding: 15px;
        background: rgba(255, 255, 255, 0.05);
      }

      .viewers {
        display: flex;
        gap: 5px;
        align-items: center;
        margin-top: 10px;
        color: var(--secondary-text);
      }

      .viewer-count {
        background: rgba(255, 255, 255, 0.1);
        padding: 3px 8px;
        border-radius: 12px;
        font-size: 0.9em;
      }

      .chat-messages {
        flex: 1;
        overflow-y: auto;
        padding: 15px;
      }

      .message {
        margin-bottom: 15px;
        animation: fadeIn 0.3s ease;
      }

      @keyframes fadeIn {
        from {
          opacity: 0;
          transform: translateY(10px);
        }
        to {
          opacity: 1;
          transform: translateY(0);
        }
      }

      .message .username {
        color: var(--netflix-red);
        font-weight: bold;
        margin-bottom: 5px;
      }

      .message .text {
        color: var(--text-color);
        line-height: 1.4;
      }

      .chat-input {
        padding: 15px;
        border-top: 1px solid rgba(255, 255, 255, 0.1);
        display: flex;
        gap: 10px;
      }

      .chat-input input {
        flex: 1;
        background: rgba(255, 255, 255, 0.1);
        border: none;
        padding: 10px;
        border-radius: 4px;
        color: var(--text-color);
      }

      .chat-input button {
        background: var(--netflix-red);
        color: var(--text-color);
        border: none;
        padding: 10px 20px;
        border-radius: 4px;
        cursor: pointer;
        transition: background-color 0.3s;
      }

      .chat-input button:hover {
        background-color: #b2070f;
      }
    </style>
  </head>
  <body>
    <div class="main-container">
      <header id="header">
        <a href="/" class="logo">frdiskndr</a>
        <div class="room-status">
          <span class="viewer-count">👥 <%= viewerCount %></span>
        </div>
      </header>

      <div class="video-container">
        <div class="video-wrapper">
          <video id="mainVideo">
            <source src="/video/<%= videoUrl %>" type="video/mp4" />
            Browser Anda tidak mendukung tag video.
          </video>
          <div class="video-info">
            <h2 class="video-title"><%= videoTitle %></h2>
            <div class="controls">
              <button class="control-btn" id="playPauseBtn">▶</button>
              <div class="progress-bar" id="progressBar">
                <div class="progress" id="progress"></div>
              </div>
              <span id="timestamp">00:00 / 00:00</span>
              <button class="control-btn" id="syncBtn">🔄 Sync</button>
            </div>
          </div>
        </div>
      </div>
    </div>

    <div class="chat-container">
      <div class="chat-header">
        <h2>Chat Room</h2>
        <button class="control-btn" id="toggleChat">👥</button>
      </div>
      <div class="room-info">
        <h3>Room: <%= roomName %></h3>
        <div class="viewers">
          <span>Penonton:</span>
          <span class="viewer-count"><%= viewerCount %></span>
        </div>
      </div>
      <div class="chat-messages" id="chatMessages"></div>
      <div class="chat-input">
        <input type="text" placeholder="Ketik pesan..." id="messageInput" />
        <button id="sendBtn">Kirim</button>
      </div>
    </div>

    <script src="/socket.io/socket.io.js"></script>
    <script>
      // State Management
      const state = {
        isPlaying: false,
        currentTime: 0,
        duration: 0,
        volume: 1,
        isMuted: false,
        isFullscreen: false,
      };

      // DOM Elements
      const elements = {
        video: document.getElementById("mainVideo"),
        playPauseBtn: document.getElementById("playPauseBtn"),
        progressBar: document.getElementById("progressBar"),
        progress: document.getElementById("progress"),
        timestamp: document.getElementById("timestamp"),
        syncBtn: document.getElementById("syncBtn"),
        header: document.getElementById("header"),
        chatMessages: document.getElementById("chatMessages"),
        messageInput: document.getElementById("messageInput"),
        sendBtn: document.getElementById("sendBtn"),
        viewerCount: document.querySelector(".viewer-count"),
      };

      // Video Controller
      // Di dalam tag <script> yang ada

      const VideoController = {
        init() {
          this.addEventListeners();
          this.setupSocketEvents();
          this.setupVideoEvents();
        },

        setupSocketEvents() {
          // Kirim status video saat ini ke server
          socket.emit('sync-response', {
            currentTime: elements.video.currentTime,
            isPlaying: !elements.video.paused
          });
        },

        setupVideoEvents() {
          elements.video.currentTime = data.currentTime;
          if (data.isPlaying) {
            elements.video.play();
            elements.playPauseBtn.textContent = '⏸';
            state.isPlaying = true;
          } else {
            elements.video.pause();
            elements.playPauseBtn.textContent = '▶';
            state.isPlaying = false;
          }
        },

        togglePlay() {
          try {
            if (elements.video.paused) {
              elements.video.play();
              state.isPlaying = true;
              elements.playPauseBtn.textContent = '⏸';
              socket.emit('video-play', elements.video.currentTime);
            } else {
              elements.video.pause();
              state.isPlaying = false;
              elements.playPauseBtn.textContent = '▶';
              socket.emit('video-pause', elements.video.currentTime);
            }
          } catch (error) {
            console.error('Error toggling play:', error);
          }
        },

        handleSeek(e) {
          const rect = elements.progressBar.getBoundingClientRect();
          const pos = (e.clientX - rect.left) / rect.width;
          const newTime = pos * state.duration;
          elements.video.currentTime = newTime;
          socket.emit('video-seek', newTime);
        }
      };

      const ChatController = {
        init() {
          this.addEventListeners();
          this.setupSocketEvents();
        },

        addEventListeners() {
          elements.sendBtn.addEventListener("click", () => this.sendMessage());
          elements.messageInput.addEventListener("keypress", (e) => {
            if (e.key === "Enter") this.sendMessage();
          });
        },

        sendMessage() {
          const message = elements.messageInput.value.trim();
          if (message) {
            socket.emit("chat-message", {
              text: message,
              timestamp: new Date().toISOString(),
            });
            elements.messageInput.value = "";
          }
        },

        addMessage(msg) {
          const messageDiv = document.createElement("div");
          messageDiv.className = "message";
          messageDiv.innerHTML = `
                    <div class="username">${this.escapeHtml(
                      msg.username || `User${msg.userId}`
                    )}</div>
                    <div class="text">${this.escapeHtml(msg.text)}</div>
                `;
          elements.chatMessages.appendChild(messageDiv);
          this.scrollToBottom();
        },

        scrollToBottom() {
          elements.chatMessages.scrollTop = elements.chatMessages.scrollHeight;
        },

        escapeHtml(text) {
          const div = document.createElement("div");
          div.textContent = text;
          return div.innerHTML;
        },
      };

      // Socket Controller
      const SocketController = {
        init() {
          this.socket = io();
          this.setupSocketEvents();
        },

        setupSocketEvents() {
          this.socket.on("connect", () => {
            console.log("Connected to server");
          });

          this.socket.on("video-play", (time) => {
            elements.video.currentTime = time;
            elements.video.play();
            elements.playPauseBtn.textContent = "⏸";
            state.isPlaying = true;
          });

          this.socket.on("video-pause", (time) => {
            elements.video.currentTime = time;
            elements.video.pause();
            elements.playPauseBtn.textContent = "▶";
            state.isPlaying = false;
          });

          this.socket.on("video-seek", (time) => {
            elements.video.currentTime = time;
          });

          this.socket.on("chat-message", (msg) => {
            ChatController.addMessage(msg);
          });

          this.socket.on("viewer-count-update", (count) => {
            elements.viewerCount.textContent = `👥 ${count}`;
          });

          this.socket.on("sync-request", (data) => {
            elements.video.currentTime = data.currentTime;
            if (data.isPlaying) {
              elements.video.play();
              state.isPlaying = true;
              elements.playPauseBtn.textContent = "⏸";
            } else {
              elements.video.pause();
              state.isPlaying = false;
              elements.playPauseBtn.textContent = "▶";
            }
          });

          this.socket.on("disconnect", () => {
            console.log("Disconnected from server");
          });
        },
      };

      // Header Controller
      const HeaderController = {
        init() {
          window.addEventListener("scroll", () => this.handleScroll());
        },

        handleScroll() {
          elements.header.classList.toggle("scrolled", window.scrollY > 50);
        },
      };

      // Initialize Application
      document.addEventListener("DOMContentLoaded", () => {
        try {
          VideoController.init();
          ChatController.init();
          SocketController.init();
          HeaderController.init();
        } catch (error) {
          console.error("Error initializing application:", error);
          alert(
            "Terjadi kesalahan saat menginisialisasi aplikasi. Silakan refresh halaman."
          );
        }
      });
    </script>
  </body>
</html>
